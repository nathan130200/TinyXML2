/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.2.1
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


#define SWIG_VERSION 0x040201
#define SWIGCSHARP
#define SWIG_DIRECTORS

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

#if defined(__cplusplus) && __cplusplus >=201103L
# define SWIG_NULLPTR nullptr
#else
# define SWIG_NULLPTR NULL
#endif 

/* -----------------------------------------------------------------------------
 * swigcompat.swg
 *
 * Macros to provide support compatibility with older C and C++ standards.
 * ----------------------------------------------------------------------------- */

/* C99 and C++11 should provide snprintf, but define SWIG_NO_SNPRINTF
 * if you're missing it.
 */
#if ((defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L) || \
     (defined __cplusplus && __cplusplus >= 201103L) || \
     defined SWIG_HAVE_SNPRINTF) && \
    !defined SWIG_NO_SNPRINTF
# define SWIG_snprintf(O,S,F,A) snprintf(O,S,F,A)
# define SWIG_snprintf2(O,S,F,A,B) snprintf(O,S,F,A,B)
#else
/* Fallback versions ignore the buffer size, but most of our uses either have a
 * fixed maximum possible size or dynamically allocate a buffer that's large
 * enough.
 */
# define SWIG_snprintf(O,S,F,A) sprintf(O,F,A)
# define SWIG_snprintf2(O,S,F,A,B) sprintf(O,F,A,B)
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_cstinyxml2(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_cstinyxml2(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_cstinyxml2(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) do { if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } } while (0)

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };
}


#ifdef __cplusplus
#include <utility>
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigSmartPointer {
    T *ptr;
    SwigSmartPointer(T *p) : ptr(p) { }
    ~SwigSmartPointer() { delete ptr; }
    SwigSmartPointer& operator=(SwigSmartPointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
    void reset(T *p) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = p; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigSmartPointer tmp(new T(t)); pointer = tmp; return *this; }
#if __cplusplus >=201103L
  SwigValueWrapper& operator=(T&& t) { SwigSmartPointer tmp(new T(std::move(t))); pointer = tmp; return *this; }
  operator T&&() const { return std::move(*pointer.ptr); }
#else
  operator T&() const { return *pointer.ptr; }
#endif
  T *operator&() const { return pointer.ptr; }
  static void reset(SwigValueWrapper& t, T *p) { t.pointer.reset(p); }
};

/*
 * SwigValueInit() is a generic initialisation solution as the following approach:
 * 
 *       T c_result = T();
 * 
 * doesn't compile for all types for example:
 * 
 *       unsigned int c_result = unsigned int();
 */
template <typename T> T SwigValueInit() {
  return T();
}

#if __cplusplus >=201103L
# define SWIG_STD_MOVE(OBJ) std::move(OBJ)
#else
# define SWIG_STD_MOVE(OBJ) OBJ
#endif

#endif


#include <string>


	#include "tinyxml2.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "tinyxml2_wrap.h"

SwigDirector_XMLVisitor::SwigDirector_XMLVisitor() : tinyxml2::XMLVisitor(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_XMLVisitor::~SwigDirector_XMLVisitor() {
  
}


bool SwigDirector_XMLVisitor::VisitEnter(tinyxml2::XMLDocument const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackVisitEnter__SWIG_0) {
    return tinyxml2::XMLVisitor::VisitEnter(arg0);
  } else {
    jarg0 = (tinyxml2::XMLDocument *) &arg0; 
    jresult = (unsigned int) swig_callbackVisitEnter__SWIG_0(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_XMLVisitor::VisitExit(tinyxml2::XMLDocument const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackVisitExit__SWIG_0) {
    return tinyxml2::XMLVisitor::VisitExit(arg0);
  } else {
    jarg0 = (tinyxml2::XMLDocument *) &arg0; 
    jresult = (unsigned int) swig_callbackVisitExit__SWIG_0(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_XMLVisitor::VisitEnter(tinyxml2::XMLElement const &arg0,tinyxml2::XMLAttribute const *arg1) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  void * jarg1 = 0 ;
  
  if (!swig_callbackVisitEnter__SWIG_1) {
    return tinyxml2::XMLVisitor::VisitEnter(arg0,arg1);
  } else {
    jarg0 = (tinyxml2::XMLElement *) &arg0; 
    jarg1 = (void *) arg1; 
    jresult = (unsigned int) swig_callbackVisitEnter__SWIG_1(jarg0, jarg1);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_XMLVisitor::VisitExit(tinyxml2::XMLElement const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackVisitExit__SWIG_1) {
    return tinyxml2::XMLVisitor::VisitExit(arg0);
  } else {
    jarg0 = (tinyxml2::XMLElement *) &arg0; 
    jresult = (unsigned int) swig_callbackVisitExit__SWIG_1(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_XMLVisitor::Visit(tinyxml2::XMLDeclaration const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackVisit__SWIG_0) {
    return tinyxml2::XMLVisitor::Visit(arg0);
  } else {
    jarg0 = (tinyxml2::XMLDeclaration *) &arg0; 
    jresult = (unsigned int) swig_callbackVisit__SWIG_0(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_XMLVisitor::Visit(tinyxml2::XMLText const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackVisit__SWIG_1) {
    return tinyxml2::XMLVisitor::Visit(arg0);
  } else {
    jarg0 = (tinyxml2::XMLText *) &arg0; 
    jresult = (unsigned int) swig_callbackVisit__SWIG_1(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_XMLVisitor::Visit(tinyxml2::XMLComment const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackVisit__SWIG_2) {
    return tinyxml2::XMLVisitor::Visit(arg0);
  } else {
    jarg0 = (tinyxml2::XMLComment *) &arg0; 
    jresult = (unsigned int) swig_callbackVisit__SWIG_2(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

bool SwigDirector_XMLVisitor::Visit(tinyxml2::XMLUnknown const &arg0) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  void * jarg0 = 0 ;
  
  if (!swig_callbackVisit__SWIG_3) {
    return tinyxml2::XMLVisitor::Visit(arg0);
  } else {
    jarg0 = (tinyxml2::XMLUnknown *) &arg0; 
    jresult = (unsigned int) swig_callbackVisit__SWIG_3(jarg0);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_XMLVisitor::swig_connect_director(SWIG_Callback0_t callbackVisitEnter__SWIG_0, SWIG_Callback1_t callbackVisitExit__SWIG_0, SWIG_Callback2_t callbackVisitEnter__SWIG_1, SWIG_Callback3_t callbackVisitExit__SWIG_1, SWIG_Callback4_t callbackVisit__SWIG_0, SWIG_Callback5_t callbackVisit__SWIG_1, SWIG_Callback6_t callbackVisit__SWIG_2, SWIG_Callback7_t callbackVisit__SWIG_3) {
  swig_callbackVisitEnter__SWIG_0 = callbackVisitEnter__SWIG_0;
  swig_callbackVisitExit__SWIG_0 = callbackVisitExit__SWIG_0;
  swig_callbackVisitEnter__SWIG_1 = callbackVisitEnter__SWIG_1;
  swig_callbackVisitExit__SWIG_1 = callbackVisitExit__SWIG_1;
  swig_callbackVisit__SWIG_0 = callbackVisit__SWIG_0;
  swig_callbackVisit__SWIG_1 = callbackVisit__SWIG_1;
  swig_callbackVisit__SWIG_2 = callbackVisit__SWIG_2;
  swig_callbackVisit__SWIG_3 = callbackVisit__SWIG_3;
}

void SwigDirector_XMLVisitor::swig_init_callbacks() {
  swig_callbackVisitEnter__SWIG_0 = 0;
  swig_callbackVisitExit__SWIG_0 = 0;
  swig_callbackVisitEnter__SWIG_1 = 0;
  swig_callbackVisitExit__SWIG_1 = 0;
  swig_callbackVisit__SWIG_0 = 0;
  swig_callbackVisit__SWIG_1 = 0;
  swig_callbackVisit__SWIG_2 = 0;
  swig_callbackVisit__SWIG_3 = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT int SWIGSTDCALL CSharp_TIXML2_MAJOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(int)TIXML2_MAJOR_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TIXML2_MINOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(int)TIXML2_MINOR_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TIXML2_PATCH_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(int)TIXML2_PATCH_VERSION;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TINYXML2_MAJOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(10);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TINYXML2_MINOR_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TINYXML2_PATCH_VERSION_get() {
  int jresult ;
  int result;
  
  result = (int)(0);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TINYXML2_MAX_ELEMENT_DEPTH_get() {
  int jresult ;
  int result;
  
  result = (int)(int)TINYXML2_MAX_ELEMENT_DEPTH;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StrPair() {
  void * jresult ;
  tinyxml2::StrPair *result = 0 ;
  
  result = (tinyxml2::StrPair *)new tinyxml2::StrPair();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StrPair(void * jarg1) {
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPair_Set(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->Set(arg2,arg3,arg4);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPair_GetStr(void * jarg1) {
  char * jresult ;
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  result = (char *)(arg1)->GetStr();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StrPair_Empty(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  result = (bool)((tinyxml2::StrPair const *)arg1)->Empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPair_SetInternedStr(void * jarg1, char * jarg2) {
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetInternedStr((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPair_SetStr__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetStr((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPair_SetStr__SWIG_1(void * jarg1, char * jarg2) {
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetStr((char const *)arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPair_ParseText(void * jarg1, char * jarg2, char * jarg3, int jarg4, void * jarg5) {
  char * jresult ;
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int *)jarg5; 
  result = (char *)(arg1)->ParseText(arg2,(char const *)arg3,arg4,arg5);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_StrPair_ParseName(void * jarg1, char * jarg2) {
  char * jresult ;
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->ParseName(arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPair_TransferTo(void * jarg1, void * jarg2) {
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  tinyxml2::StrPair *arg2 = (tinyxml2::StrPair *) 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  arg2 = (tinyxml2::StrPair *)jarg2; 
  (arg1)->TransferTo(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StrPair_Reset(void * jarg1) {
  tinyxml2::StrPair *arg1 = (tinyxml2::StrPair *) 0 ;
  
  arg1 = (tinyxml2::StrPair *)jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MemPool(void * jarg1) {
  tinyxml2::MemPool *arg1 = (tinyxml2::MemPool *) 0 ;
  
  arg1 = (tinyxml2::MemPool *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MemPool_ItemSize(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::MemPool *arg1 = (tinyxml2::MemPool *) 0 ;
  size_t result;
  
  arg1 = (tinyxml2::MemPool *)jarg1; 
  result = ((tinyxml2::MemPool const *)arg1)->ItemSize();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MemPool_Alloc(void * jarg1) {
  void * jresult ;
  tinyxml2::MemPool *arg1 = (tinyxml2::MemPool *) 0 ;
  void *result = 0 ;
  
  arg1 = (tinyxml2::MemPool *)jarg1; 
  result = (void *)(arg1)->Alloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MemPool_Free(void * jarg1, void * jarg2) {
  tinyxml2::MemPool *arg1 = (tinyxml2::MemPool *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (tinyxml2::MemPool *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->Free(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_MemPool_SetTracked(void * jarg1) {
  tinyxml2::MemPool *arg1 = (tinyxml2::MemPool *) 0 ;
  
  arg1 = (tinyxml2::MemPool *)jarg1; 
  (arg1)->SetTracked();
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XMLVisitor(void * jarg1) {
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitEnter__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLDocument *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDocument const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->VisitEnter((tinyxml2::XMLDocument const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitEnterSwigExplicitXMLVisitor__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLDocument *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDocument const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::VisitEnter((tinyxml2::XMLDocument const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitExit__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLDocument *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDocument const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->VisitExit((tinyxml2::XMLDocument const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitExitSwigExplicitXMLVisitor__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLDocument *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDocument const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::VisitExit((tinyxml2::XMLDocument const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitEnter__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLElement *arg2 = 0 ;
  tinyxml2::XMLAttribute *arg3 = (tinyxml2::XMLAttribute *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLElement *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLElement const & is null", 0);
    return 0;
  } 
  arg3 = (tinyxml2::XMLAttribute *)jarg3; 
  result = (bool)(arg1)->VisitEnter((tinyxml2::XMLElement const &)*arg2,(tinyxml2::XMLAttribute const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitEnterSwigExplicitXMLVisitor__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLElement *arg2 = 0 ;
  tinyxml2::XMLAttribute *arg3 = (tinyxml2::XMLAttribute *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLElement *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLElement const & is null", 0);
    return 0;
  } 
  arg3 = (tinyxml2::XMLAttribute *)jarg3; 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::VisitEnter((tinyxml2::XMLElement const &)*arg2,(tinyxml2::XMLAttribute const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitExit__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLElement *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLElement *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLElement const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->VisitExit((tinyxml2::XMLElement const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitExitSwigExplicitXMLVisitor__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLElement *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLElement *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLElement const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::VisitExit((tinyxml2::XMLElement const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_Visit__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLDeclaration *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLDeclaration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDeclaration const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLDeclaration const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitSwigExplicitXMLVisitor__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLDeclaration *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLDeclaration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDeclaration const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::Visit((tinyxml2::XMLDeclaration const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_Visit__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLText *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLText const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLText const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitSwigExplicitXMLVisitor__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLText *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLText const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::Visit((tinyxml2::XMLText const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_Visit__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLComment *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLComment *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLComment const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLComment const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitSwigExplicitXMLVisitor__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLComment *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLComment *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLComment const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::Visit((tinyxml2::XMLComment const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_Visit__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLUnknown *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLUnknown *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLUnknown const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLUnknown const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLVisitor_VisitSwigExplicitXMLVisitor__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLVisitor *arg1 = (tinyxml2::XMLVisitor *) 0 ;
  tinyxml2::XMLUnknown *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLVisitor *)jarg1; 
  arg2 = (tinyxml2::XMLUnknown *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLUnknown const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->tinyxml2::XMLVisitor::Visit((tinyxml2::XMLUnknown const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLVisitor() {
  void * jresult ;
  tinyxml2::XMLVisitor *result = 0 ;
  
  result = (tinyxml2::XMLVisitor *)new SwigDirector_XMLVisitor();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLVisitor_director_connect(void *objarg, SwigDirector_XMLVisitor::SWIG_Callback0_t callback0, SwigDirector_XMLVisitor::SWIG_Callback1_t callback1, SwigDirector_XMLVisitor::SWIG_Callback2_t callback2, SwigDirector_XMLVisitor::SWIG_Callback3_t callback3, SwigDirector_XMLVisitor::SWIG_Callback4_t callback4, SwigDirector_XMLVisitor::SWIG_Callback5_t callback5, SwigDirector_XMLVisitor::SWIG_Callback6_t callback6, SwigDirector_XMLVisitor::SWIG_Callback7_t callback7) {
  tinyxml2::XMLVisitor *obj = (tinyxml2::XMLVisitor *)objarg;
  SwigDirector_XMLVisitor *director = static_cast<SwigDirector_XMLVisitor *>(obj);
  director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLUtil_SkipWhiteSpace__SWIG_0(char * jarg1, void * jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (char *)tinyxml2::XMLUtil::SkipWhiteSpace((char const *)arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_IsWhiteSpace(char jarg1) {
  unsigned int jresult ;
  char arg1 ;
  bool result;
  
  arg1 = (char)jarg1; 
  result = (bool)tinyxml2::XMLUtil::IsWhiteSpace(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_IsNameStartChar(unsigned char jarg1) {
  unsigned int jresult ;
  unsigned char arg1 ;
  bool result;
  
  arg1 = (unsigned char)jarg1; 
  result = (bool)tinyxml2::XMLUtil::IsNameStartChar(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_IsNameChar(unsigned char jarg1) {
  unsigned int jresult ;
  unsigned char arg1 ;
  bool result;
  
  arg1 = (unsigned char)jarg1; 
  result = (bool)tinyxml2::XMLUtil::IsNameChar(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_IsPrefixHex(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)tinyxml2::XMLUtil::IsPrefixHex((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_StringEqual__SWIG_0(char * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)tinyxml2::XMLUtil::StringEqual((char const *)arg1,(char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_StringEqual__SWIG_1(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::StringEqual((char const *)arg1,(char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_IsUTF8Continuation(char jarg1) {
  unsigned int jresult ;
  char arg1 ;
  bool result;
  
  arg1 = (char)jarg1; 
  result = (bool)tinyxml2::XMLUtil::IsUTF8Continuation(arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLUtil_ReadBOM(char * jarg1, void * jarg2) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (char *)tinyxml2::XMLUtil::ReadBOM((char const *)arg1,arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLUtil_GetCharacterRef(char * jarg1, char * jarg2, void * jarg3) {
  char * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  char *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (char *)tinyxml2::XMLUtil::GetCharacterRef((char const *)arg1,arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ConvertUTF32ToUTF8(unsigned int jarg1, char * jarg2, void * jarg3) {
  unsigned long arg1 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  
  arg1 = (unsigned long)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  tinyxml2::XMLUtil::ConvertUTF32ToUTF8(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ToStr__SWIG_0(int jarg1, char * jarg2, int jarg3) {
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  tinyxml2::XMLUtil::ToStr(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ToStr__SWIG_1(unsigned int jarg1, char * jarg2, int jarg3) {
  unsigned int arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (unsigned int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  tinyxml2::XMLUtil::ToStr(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ToStr__SWIG_2(unsigned int jarg1, char * jarg2, int jarg3) {
  bool arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  tinyxml2::XMLUtil::ToStr(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ToStr__SWIG_3(float jarg1, char * jarg2, int jarg3) {
  float arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (float)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  tinyxml2::XMLUtil::ToStr(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ToStr__SWIG_4(double jarg1, char * jarg2, int jarg3) {
  double arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (double)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  tinyxml2::XMLUtil::ToStr(arg1,arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ToStr__SWIG_5(void * jarg1, char * jarg2, int jarg3) {
  int64_t arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int64_t *argp1 ;
  
  argp1 = (int64_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  tinyxml2::XMLUtil::ToStr(SWIG_STD_MOVE(arg1),arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_ToStr__SWIG_6(void * jarg1, char * jarg2, int jarg3) {
  uint64_t arg1 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  uint64_t *argp1 ;
  
  argp1 = (uint64_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg1 = *argp1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  tinyxml2::XMLUtil::ToStr(SWIG_STD_MOVE(arg1),arg2,arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_ToInt(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int *arg2 = (int *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::ToInt((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_ToUnsigned(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::ToUnsigned((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_ToBool(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool *arg2 = (bool *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::ToBool((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_ToFloat(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  float *arg2 = (float *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::ToFloat((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_ToDouble(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  double *arg2 = (double *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::ToDouble((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_ToInt64(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (int64_t *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::ToInt64((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUtil_ToUnsigned64(char * jarg1, void * jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  result = (bool)tinyxml2::XMLUtil::ToUnsigned64((char const *)arg1,arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLUtil_SetBoolSerialization(char * jarg1, char * jarg2) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  tinyxml2::XMLUtil::SetBoolSerialization((char const *)arg1,(char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLUtil() {
  void * jresult ;
  tinyxml2::XMLUtil *result = 0 ;
  
  result = (tinyxml2::XMLUtil *)new tinyxml2::XMLUtil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XMLUtil(void * jarg1) {
  tinyxml2::XMLUtil *arg1 = (tinyxml2::XMLUtil *) 0 ;
  
  arg1 = (tinyxml2::XMLUtil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_GetDocument__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLDocument *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLDocument *)((tinyxml2::XMLNode const *)arg1)->GetDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_ToElement__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLElement *)(arg1)->ToElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_ToText__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLText *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLText *)(arg1)->ToText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_ToComment__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLComment *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLComment *)(arg1)->ToComment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_ToDocument__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLDocument *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLDocument *)(arg1)->ToDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_ToDeclaration__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLDeclaration *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLDeclaration *)(arg1)->ToDeclaration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_ToUnknown__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLUnknown *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLUnknown *)(arg1)->ToUnknown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLNode_ChildElementCount__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((tinyxml2::XMLNode const *)arg1)->ChildElementCount((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLNode_ChildElementCount__SWIG_1(void * jarg1) {
  int jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (int)((tinyxml2::XMLNode const *)arg1)->ChildElementCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLNode_Value(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (char *)((tinyxml2::XMLNode const *)arg1)->Value();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLNode_SetValue__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetValue((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLNode_SetValue__SWIG_1(void * jarg1, char * jarg2) {
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetValue((char const *)arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLNode_GetLineNum(void * jarg1) {
  int jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (int)((tinyxml2::XMLNode const *)arg1)->GetLineNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_Parent__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLNode const *)arg1)->Parent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLNode_NoChildren(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (bool)((tinyxml2::XMLNode const *)arg1)->NoChildren();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_FirstChild__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLNode const *)arg1)->FirstChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_FirstChildElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->FirstChildElement((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_FirstChildElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->FirstChildElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_LastChild__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLNode const *)arg1)->LastChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_LastChildElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->LastChildElement((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_LastChildElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->LastChildElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_PreviousSibling__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLNode const *)arg1)->PreviousSibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_PreviousSiblingElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->PreviousSiblingElement((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_PreviousSiblingElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->PreviousSiblingElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_NextSibling__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLNode const *)arg1)->NextSibling();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_NextSiblingElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->NextSiblingElement((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_NextSiblingElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLNode const *)arg1)->NextSiblingElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_InsertEndChild(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (tinyxml2::XMLNode *)(arg1)->InsertEndChild(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_LinkEndChild(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (tinyxml2::XMLNode *)(arg1)->LinkEndChild(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_InsertFirstChild(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (tinyxml2::XMLNode *)(arg1)->InsertFirstChild(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_InsertAfterChild(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *arg3 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  arg3 = (tinyxml2::XMLNode *)jarg3; 
  result = (tinyxml2::XMLNode *)(arg1)->InsertAfterChild(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLNode_DeleteChildren(void * jarg1) {
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  (arg1)->DeleteChildren();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLNode_DeleteChild(void * jarg1, void * jarg2) {
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  (arg1)->DeleteChild(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_ShallowClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLNode const *)arg1)->ShallowClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_DeepClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLNode const *)arg1)->DeepClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLNode_ShallowEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (bool)((tinyxml2::XMLNode const *)arg1)->ShallowEqual((tinyxml2::XMLNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLNode_Accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLVisitor *arg2 = (tinyxml2::XMLVisitor *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (tinyxml2::XMLVisitor *)jarg2; 
  result = (bool)((tinyxml2::XMLNode const *)arg1)->Accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLNode_SetUserData(void * jarg1, void * jarg2) {
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  arg2 = (void *)jarg2; 
  (arg1)->SetUserData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNode_GetUserData(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  void *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (void *)((tinyxml2::XMLNode const *)arg1)->GetUserData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLText_Accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLText *arg1 = (tinyxml2::XMLText *) 0 ;
  tinyxml2::XMLVisitor *arg2 = (tinyxml2::XMLVisitor *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLText *)jarg1; 
  arg2 = (tinyxml2::XMLVisitor *)jarg2; 
  result = (bool)((tinyxml2::XMLText const *)arg1)->Accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLText_ToText__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLText *arg1 = (tinyxml2::XMLText *) 0 ;
  tinyxml2::XMLText *result = 0 ;
  
  arg1 = (tinyxml2::XMLText *)jarg1; 
  result = (tinyxml2::XMLText *)(arg1)->ToText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLText_SetCData(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLText *arg1 = (tinyxml2::XMLText *) 0 ;
  bool arg2 ;
  
  arg1 = (tinyxml2::XMLText *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetCData(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLText_CData(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLText *arg1 = (tinyxml2::XMLText *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLText *)jarg1; 
  result = (bool)((tinyxml2::XMLText const *)arg1)->CData();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLText_ShallowClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLText *arg1 = (tinyxml2::XMLText *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLText *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLText const *)arg1)->ShallowClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLText_ShallowEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLText *arg1 = (tinyxml2::XMLText *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLText *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (bool)((tinyxml2::XMLText const *)arg1)->ShallowEqual((tinyxml2::XMLNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLComment_ToComment__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLComment *arg1 = (tinyxml2::XMLComment *) 0 ;
  tinyxml2::XMLComment *result = 0 ;
  
  arg1 = (tinyxml2::XMLComment *)jarg1; 
  result = (tinyxml2::XMLComment *)(arg1)->ToComment();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLComment_Accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLComment *arg1 = (tinyxml2::XMLComment *) 0 ;
  tinyxml2::XMLVisitor *arg2 = (tinyxml2::XMLVisitor *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLComment *)jarg1; 
  arg2 = (tinyxml2::XMLVisitor *)jarg2; 
  result = (bool)((tinyxml2::XMLComment const *)arg1)->Accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLComment_ShallowClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLComment *arg1 = (tinyxml2::XMLComment *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLComment *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLComment const *)arg1)->ShallowClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLComment_ShallowEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLComment *arg1 = (tinyxml2::XMLComment *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLComment *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (bool)((tinyxml2::XMLComment const *)arg1)->ShallowEqual((tinyxml2::XMLNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDeclaration_ToDeclaration__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLDeclaration *arg1 = (tinyxml2::XMLDeclaration *) 0 ;
  tinyxml2::XMLDeclaration *result = 0 ;
  
  arg1 = (tinyxml2::XMLDeclaration *)jarg1; 
  result = (tinyxml2::XMLDeclaration *)(arg1)->ToDeclaration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLDeclaration_Accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLDeclaration *arg1 = (tinyxml2::XMLDeclaration *) 0 ;
  tinyxml2::XMLVisitor *arg2 = (tinyxml2::XMLVisitor *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLDeclaration *)jarg1; 
  arg2 = (tinyxml2::XMLVisitor *)jarg2; 
  result = (bool)((tinyxml2::XMLDeclaration const *)arg1)->Accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDeclaration_ShallowClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLDeclaration *arg1 = (tinyxml2::XMLDeclaration *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLDeclaration *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLDeclaration const *)arg1)->ShallowClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLDeclaration_ShallowEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLDeclaration *arg1 = (tinyxml2::XMLDeclaration *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLDeclaration *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (bool)((tinyxml2::XMLDeclaration const *)arg1)->ShallowEqual((tinyxml2::XMLNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLUnknown_ToUnknown__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLUnknown *arg1 = (tinyxml2::XMLUnknown *) 0 ;
  tinyxml2::XMLUnknown *result = 0 ;
  
  arg1 = (tinyxml2::XMLUnknown *)jarg1; 
  result = (tinyxml2::XMLUnknown *)(arg1)->ToUnknown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUnknown_Accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLUnknown *arg1 = (tinyxml2::XMLUnknown *) 0 ;
  tinyxml2::XMLVisitor *arg2 = (tinyxml2::XMLVisitor *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLUnknown *)jarg1; 
  arg2 = (tinyxml2::XMLVisitor *)jarg2; 
  result = (bool)((tinyxml2::XMLUnknown const *)arg1)->Accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLUnknown_ShallowClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLUnknown *arg1 = (tinyxml2::XMLUnknown *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLUnknown *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLUnknown const *)arg1)->ShallowClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLUnknown_ShallowEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLUnknown *arg1 = (tinyxml2::XMLUnknown *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLUnknown *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (bool)((tinyxml2::XMLUnknown const *)arg1)->ShallowEqual((tinyxml2::XMLNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLAttribute_Name(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (char *)((tinyxml2::XMLAttribute const *)arg1)->Name();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLAttribute_Value(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (char *)((tinyxml2::XMLAttribute const *)arg1)->Value();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_GetLineNum(void * jarg1) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (int)((tinyxml2::XMLAttribute const *)arg1)->GetLineNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLAttribute_Next(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  tinyxml2::XMLAttribute *result = 0 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (tinyxml2::XMLAttribute *)((tinyxml2::XMLAttribute const *)arg1)->Next();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_IntValue(void * jarg1) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (int)((tinyxml2::XMLAttribute const *)arg1)->IntValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLAttribute_Int64Value(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  int64_t result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = ((tinyxml2::XMLAttribute const *)arg1)->Int64Value();
  jresult = new int64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLAttribute_Unsigned64Value(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  uint64_t result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = ((tinyxml2::XMLAttribute const *)arg1)->Unsigned64Value();
  jresult = new uint64_t(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLAttribute_UnsignedValue(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  unsigned int result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (unsigned int)((tinyxml2::XMLAttribute const *)arg1)->UnsignedValue();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLAttribute_BoolValue(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (bool)((tinyxml2::XMLAttribute const *)arg1)->BoolValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_XMLAttribute_DoubleValue(void * jarg1) {
  double jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  double result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (double)((tinyxml2::XMLAttribute const *)arg1)->DoubleValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XMLAttribute_FloatValue(void * jarg1) {
  float jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  float result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  result = (float)((tinyxml2::XMLAttribute const *)arg1)->FloatValue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_QueryIntValue(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  int *arg2 = (int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLAttribute const *)arg1)->QueryIntValue(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_QueryUnsignedValue(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLAttribute const *)arg1)->QueryUnsignedValue(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_QueryInt64Value(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (int64_t *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLAttribute const *)arg1)->QueryInt64Value(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_QueryUnsigned64Value(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLAttribute const *)arg1)->QueryUnsigned64Value(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_QueryBoolValue(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  bool *arg2 = (bool *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLAttribute const *)arg1)->QueryBoolValue(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_QueryDoubleValue(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  double *arg2 = (double *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLAttribute const *)arg1)->QueryDoubleValue(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLAttribute_QueryFloatValue(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  float *arg2 = (float *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLAttribute const *)arg1)->QueryFloatValue(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_0(void * jarg1, char * jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetAttribute((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_1(void * jarg1, int jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  int arg2 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetAttribute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_2(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetAttribute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_3(void * jarg1, void * jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  argp2 = (int64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAttribute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_4(void * jarg1, void * jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetAttribute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_5(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  bool arg2 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetAttribute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_6(void * jarg1, double jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  double arg2 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetAttribute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLAttribute_SetAttribute__SWIG_7(void * jarg1, float jarg2) {
  tinyxml2::XMLAttribute *arg1 = (tinyxml2::XMLAttribute *) 0 ;
  float arg2 ;
  
  arg1 = (tinyxml2::XMLAttribute *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetAttribute(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLElement_Name(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (char *)((tinyxml2::XMLElement const *)arg1)->Name();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetName__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetName((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetName__SWIG_1(void * jarg1, char * jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetName((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_ToElement__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (tinyxml2::XMLElement *)(arg1)->ToElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_Accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  tinyxml2::XMLVisitor *arg2 = (tinyxml2::XMLVisitor *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (tinyxml2::XMLVisitor *)jarg2; 
  result = (bool)((tinyxml2::XMLElement const *)arg1)->Accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLElement_Attribute__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (char *)((tinyxml2::XMLElement const *)arg1)->Attribute((char const *)arg2,(char const *)arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLElement_Attribute__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)((tinyxml2::XMLElement const *)arg1)->Attribute((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_IntAttribute__SWIG_0(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)((tinyxml2::XMLElement const *)arg1)->IntAttribute((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_IntAttribute__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)((tinyxml2::XMLElement const *)arg1)->IntAttribute((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_UnsignedAttribute__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)((tinyxml2::XMLElement const *)arg1)->UnsignedAttribute((char const *)arg2,arg3);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_UnsignedAttribute__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (unsigned int)((tinyxml2::XMLElement const *)arg1)->UnsignedAttribute((char const *)arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Int64Attribute__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  int64_t *argp3 ;
  int64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = ((tinyxml2::XMLElement const *)arg1)->Int64Attribute((char const *)arg2,arg3);
  jresult = new int64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Int64Attribute__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((tinyxml2::XMLElement const *)arg1)->Int64Attribute((char const *)arg2);
  jresult = new int64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Unsigned64Attribute__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t arg3 ;
  uint64_t *argp3 ;
  uint64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = ((tinyxml2::XMLElement const *)arg1)->Unsigned64Attribute((char const *)arg2,arg3);
  jresult = new uint64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Unsigned64Attribute__SWIG_1(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((tinyxml2::XMLElement const *)arg1)->Unsigned64Attribute((char const *)arg2);
  jresult = new uint64_t(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_BoolAttribute__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (bool)((tinyxml2::XMLElement const *)arg1)->BoolAttribute((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_BoolAttribute__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)((tinyxml2::XMLElement const *)arg1)->BoolAttribute((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_XMLElement_DoubleAttribute__SWIG_0(void * jarg1, char * jarg2, double jarg3) {
  double jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  double result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double)jarg3; 
  result = (double)((tinyxml2::XMLElement const *)arg1)->DoubleAttribute((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_XMLElement_DoubleAttribute__SWIG_1(void * jarg1, char * jarg2) {
  double jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (double)((tinyxml2::XMLElement const *)arg1)->DoubleAttribute((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XMLElement_FloatAttribute__SWIG_0(void * jarg1, char * jarg2, float jarg3) {
  float jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  float result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  result = (float)((tinyxml2::XMLElement const *)arg1)->FloatAttribute((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XMLElement_FloatAttribute__SWIG_1(void * jarg1, char * jarg2) {
  float jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  float result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (float)((tinyxml2::XMLElement const *)arg1)->FloatAttribute((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryIntAttribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryIntAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryUnsignedAttribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryUnsignedAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryInt64Attribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int64_t *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryInt64Attribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryUnsigned64Attribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint64_t *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryUnsigned64Attribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryBoolAttribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryBoolAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryDoubleAttribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryDoubleAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryFloatAttribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryFloatAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryStringAttribute(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char **)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryStringAttribute((char const *)arg2,(char const **)arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_0(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_1(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int *arg3 = (unsigned int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t *arg3 = (int64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int64_t *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t *arg3 = (uint64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (uint64_t *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  bool *arg3 = (bool *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (bool *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_5(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_6(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  float *arg3 = (float *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float *)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryAttribute__SWIG_7(void * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char **arg3 = (char **) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char **)jarg3; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryAttribute((char const *)arg2,(char const **)arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->SetAttribute((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->SetAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->SetAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  int64_t *argp3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t arg3 ;
  uint64_t *argp3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->SetAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_5(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->SetAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_6(void * jarg1, char * jarg2, double jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->SetAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetAttribute__SWIG_7(void * jarg1, char * jarg2, float jarg3) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  float arg3 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->SetAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_DeleteAttribute(void * jarg1, char * jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->DeleteAttribute((char const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_FirstAttribute(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  tinyxml2::XMLAttribute *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (tinyxml2::XMLAttribute *)((tinyxml2::XMLElement const *)arg1)->FirstAttribute();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_FindAttribute(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLAttribute *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLAttribute *)((tinyxml2::XMLElement const *)arg1)->FindAttribute((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLElement_GetText(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (char *)((tinyxml2::XMLElement const *)arg1)->GetText();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_0(void * jarg1, char * jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->SetText((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_1(void * jarg1, int jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int arg2 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->SetText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_2(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_3(void * jarg1, void * jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  argp2 = (int64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_4(void * jarg1, void * jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->SetText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_5(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  bool arg2 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_6(void * jarg1, double jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  double arg2 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->SetText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLElement_SetText__SWIG_7(void * jarg1, float jarg2) {
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  float arg2 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->SetText(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryIntText(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int *arg2 = (int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (int *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryIntText(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryUnsignedText(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  unsigned int *arg2 = (unsigned int *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (unsigned int *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryUnsignedText(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryInt64Text(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int64_t *arg2 = (int64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (int64_t *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryInt64Text(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryUnsigned64Text(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  uint64_t *arg2 = (uint64_t *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (uint64_t *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryUnsigned64Text(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryBoolText(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  bool *arg2 = (bool *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (bool *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryBoolText(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryDoubleText(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  double *arg2 = (double *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (double *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryDoubleText(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_QueryFloatText(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  float *arg2 = (float *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (float *)jarg2; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLElement const *)arg1)->QueryFloatText(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_IntText__SWIG_0(void * jarg1, int jarg2) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (int)jarg2; 
  result = (int)((tinyxml2::XMLElement const *)arg1)->IntText(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_IntText__SWIG_1(void * jarg1) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (int)((tinyxml2::XMLElement const *)arg1)->IntText();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_UnsignedText__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (unsigned int)((tinyxml2::XMLElement const *)arg1)->UnsignedText(arg2);
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_UnsignedText__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  unsigned int result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (unsigned int)((tinyxml2::XMLElement const *)arg1)->UnsignedText();
  jresult = (unsigned int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Int64Text__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  int64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  argp2 = (int64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((tinyxml2::XMLElement const *)arg1)->Int64Text(arg2);
  jresult = new int64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Int64Text__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  int64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = ((tinyxml2::XMLElement const *)arg1)->Int64Text();
  jresult = new int64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Unsigned64Text__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  uint64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((tinyxml2::XMLElement const *)arg1)->Unsigned64Text(arg2);
  jresult = new uint64_t(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_Unsigned64Text__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  uint64_t result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = ((tinyxml2::XMLElement const *)arg1)->Unsigned64Text();
  jresult = new uint64_t(result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_BoolText__SWIG_0(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)((tinyxml2::XMLElement const *)arg1)->BoolText(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_BoolText__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (bool)((tinyxml2::XMLElement const *)arg1)->BoolText();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_XMLElement_DoubleText__SWIG_0(void * jarg1, double jarg2) {
  double jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  double arg2 ;
  double result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (double)jarg2; 
  result = (double)((tinyxml2::XMLElement const *)arg1)->DoubleText(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_XMLElement_DoubleText__SWIG_1(void * jarg1) {
  double jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  double result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (double)((tinyxml2::XMLElement const *)arg1)->DoubleText();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XMLElement_FloatText__SWIG_0(void * jarg1, float jarg2) {
  float jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (float)jarg2; 
  result = (float)((tinyxml2::XMLElement const *)arg1)->FloatText(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_XMLElement_FloatText__SWIG_1(void * jarg1) {
  float jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  float result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (float)((tinyxml2::XMLElement const *)arg1)->FloatText();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_InsertNewChildElement(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLElement *)(arg1)->InsertNewChildElement((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_InsertNewComment(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLComment *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLComment *)(arg1)->InsertNewComment((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_InsertNewText(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLText *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLText *)(arg1)->InsertNewText((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_InsertNewDeclaration(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLDeclaration *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLDeclaration *)(arg1)->InsertNewDeclaration((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_InsertNewUnknown(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLUnknown *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLUnknown *)(arg1)->InsertNewUnknown((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLElement_ClosingType(void * jarg1) {
  int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  tinyxml2::XMLElement::ElementClosingType result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  result = (tinyxml2::XMLElement::ElementClosingType)((tinyxml2::XMLElement const *)arg1)->ClosingType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLElement_ShallowClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLElement const *)arg1)->ShallowClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLElement_ShallowEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLElement *arg1 = (tinyxml2::XMLElement *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLElement *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (bool)((tinyxml2::XMLElement const *)arg1)->ShallowEqual((tinyxml2::XMLNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLDocument__SWIG_0(unsigned int jarg1, int jarg2) {
  void * jresult ;
  bool arg1 ;
  tinyxml2::Whitespace arg2 ;
  tinyxml2::XMLDocument *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  arg2 = (tinyxml2::Whitespace)jarg2; 
  result = (tinyxml2::XMLDocument *)new tinyxml2::XMLDocument(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLDocument__SWIG_1(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  tinyxml2::XMLDocument *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (tinyxml2::XMLDocument *)new tinyxml2::XMLDocument(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLDocument__SWIG_2() {
  void * jresult ;
  tinyxml2::XMLDocument *result = 0 ;
  
  result = (tinyxml2::XMLDocument *)new tinyxml2::XMLDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XMLDocument(void * jarg1) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_ToDocument__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLDocument *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (tinyxml2::XMLDocument *)(arg1)->ToDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_Parse__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (size_t)jarg3; 
  result = (tinyxml2::XMLError)(arg1)->Parse((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_Parse__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLError)(arg1)->Parse((char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_LoadFile__SWIG_0(void * jarg1, char * jarg2) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLError)(arg1)->LoadFile((char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_LoadFile__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (FILE *)jarg2; 
  result = (tinyxml2::XMLError)(arg1)->LoadFile(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_SaveFile__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (tinyxml2::XMLError)(arg1)->SaveFile((char const *)arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_SaveFile__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLError)(arg1)->SaveFile((char const *)arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_SaveFile__SWIG_2(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool arg3 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (FILE *)jarg2; 
  arg3 = jarg3 ? true : false; 
  result = (tinyxml2::XMLError)(arg1)->SaveFile(arg2,arg3);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_SaveFile__SWIG_3(void * jarg1, void * jarg2) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (FILE *)jarg2; 
  result = (tinyxml2::XMLError)(arg1)->SaveFile(arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLDocument_ProcessEntities(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (bool)((tinyxml2::XMLDocument const *)arg1)->ProcessEntities();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_WhitespaceMode(void * jarg1) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::Whitespace result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (tinyxml2::Whitespace)((tinyxml2::XMLDocument const *)arg1)->WhitespaceMode();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLDocument_HasBOM(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (bool)((tinyxml2::XMLDocument const *)arg1)->HasBOM();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_SetBOM(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  bool arg2 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetBOM(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_RootElement__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (tinyxml2::XMLElement *)(arg1)->RootElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_Print__SWIG_0(void * jarg1, void * jarg2) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLPrinter *arg2 = (tinyxml2::XMLPrinter *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (tinyxml2::XMLPrinter *)jarg2; 
  ((tinyxml2::XMLDocument const *)arg1)->Print(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_Print__SWIG_1(void * jarg1) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  ((tinyxml2::XMLDocument const *)arg1)->Print();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLDocument_Accept(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLVisitor *arg2 = (tinyxml2::XMLVisitor *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (tinyxml2::XMLVisitor *)jarg2; 
  result = (bool)((tinyxml2::XMLDocument const *)arg1)->Accept(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_NewElement(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLElement *)(arg1)->NewElement((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_NewComment(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLComment *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLComment *)(arg1)->NewComment((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_NewText(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLText *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLText *)(arg1)->NewText((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_NewDeclaration__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLDeclaration *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLDeclaration *)(arg1)->NewDeclaration((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_NewDeclaration__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLDeclaration *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (tinyxml2::XMLDeclaration *)(arg1)->NewDeclaration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_NewUnknown(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLUnknown *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (tinyxml2::XMLUnknown *)(arg1)->NewUnknown((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_DeleteNode(void * jarg1, void * jarg2) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  (arg1)->DeleteNode(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_ClearError(void * jarg1) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  (arg1)->ClearError();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLDocument_Error(void * jarg1) {
  unsigned int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (bool)((tinyxml2::XMLDocument const *)arg1)->Error();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_ErrorID(void * jarg1) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLError result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (tinyxml2::XMLError)((tinyxml2::XMLDocument const *)arg1)->ErrorID();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLDocument_ErrorName(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (char *)((tinyxml2::XMLDocument const *)arg1)->ErrorName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLDocument_ErrorIDToName(int jarg1) {
  char * jresult ;
  tinyxml2::XMLError arg1 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLError)jarg1; 
  result = (char *)tinyxml2::XMLDocument::ErrorIDToName(arg1);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLDocument_ErrorStr(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (char *)((tinyxml2::XMLDocument const *)arg1)->ErrorStr();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_PrintError(void * jarg1) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  ((tinyxml2::XMLDocument const *)arg1)->PrintError();
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLDocument_ErrorLineNum(void * jarg1) {
  int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  result = (int)((tinyxml2::XMLDocument const *)arg1)->ErrorLineNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_Clear(void * jarg1) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  (arg1)->Clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_DeepCopy(void * jarg1, void * jarg2) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  ((tinyxml2::XMLDocument const *)arg1)->DeepCopy(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLDocument_Identify(void * jarg1, char * jarg2, void * jarg3, unsigned int jarg4) {
  char * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  char *arg2 = (char *) 0 ;
  tinyxml2::XMLNode **arg3 = (tinyxml2::XMLNode **) 0 ;
  bool arg4 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (tinyxml2::XMLNode **)jarg3; 
  arg4 = jarg4 ? true : false; 
  result = (char *)(arg1)->Identify(arg2,arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLDocument_MarkInUse(void * jarg1, void * jarg2) {
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) (tinyxml2::XMLNode *)0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  (arg1)->MarkInUse((tinyxml2::XMLNode const *)arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLDocument_ShallowClone(void * jarg1, void * jarg2) {
  void * jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLDocument *arg2 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLDocument const *)arg1)->ShallowClone(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLDocument_ShallowEqual(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLDocument *arg1 = (tinyxml2::XMLDocument *) 0 ;
  tinyxml2::XMLNode *arg2 = (tinyxml2::XMLNode *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLDocument *)jarg1; 
  arg2 = (tinyxml2::XMLNode *)jarg2; 
  result = (bool)((tinyxml2::XMLDocument const *)arg1)->ShallowEqual((tinyxml2::XMLNode const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLHandle__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLHandle *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLHandle *)new tinyxml2::XMLHandle(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLHandle__SWIG_2(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = 0 ;
  tinyxml2::XMLHandle *result = 0 ;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLHandle const & is null", 0);
    return 0;
  } 
  result = (tinyxml2::XMLHandle *)new tinyxml2::XMLHandle((tinyxml2::XMLHandle const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_FirstChild(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->FirstChild();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_FirstChildElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->FirstChildElement((char const *)arg2);
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_FirstChildElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->FirstChildElement();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_LastChild(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->LastChild();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_LastChildElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->LastChildElement((char const *)arg2);
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_LastChildElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->LastChildElement();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_PreviousSibling(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->PreviousSibling();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_PreviousSiblingElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->PreviousSiblingElement((char const *)arg2);
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_PreviousSiblingElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->PreviousSiblingElement();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_NextSibling(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->NextSibling();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_NextSiblingElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (arg1)->NextSiblingElement((char const *)arg2);
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_NextSiblingElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLHandle > result;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (arg1)->NextSiblingElement();
  jresult = new tinyxml2::XMLHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_ToNode(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (tinyxml2::XMLNode *)(arg1)->ToNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_ToElement(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (tinyxml2::XMLElement *)(arg1)->ToElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_ToText(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  tinyxml2::XMLText *result = 0 ;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (tinyxml2::XMLText *)(arg1)->ToText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_ToUnknown(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  tinyxml2::XMLUnknown *result = 0 ;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (tinyxml2::XMLUnknown *)(arg1)->ToUnknown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLHandle_ToDeclaration(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  tinyxml2::XMLDeclaration *result = 0 ;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  result = (tinyxml2::XMLDeclaration *)(arg1)->ToDeclaration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XMLHandle(void * jarg1) {
  tinyxml2::XMLHandle *arg1 = (tinyxml2::XMLHandle *) 0 ;
  
  arg1 = (tinyxml2::XMLHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLConstHandle__SWIG_0(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLNode *arg1 = (tinyxml2::XMLNode *) 0 ;
  tinyxml2::XMLConstHandle *result = 0 ;
  
  arg1 = (tinyxml2::XMLNode *)jarg1; 
  result = (tinyxml2::XMLConstHandle *)new tinyxml2::XMLConstHandle((tinyxml2::XMLNode const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLConstHandle__SWIG_2(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = 0 ;
  tinyxml2::XMLConstHandle *result = 0 ;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLConstHandle const & is null", 0);
    return 0;
  } 
  result = (tinyxml2::XMLConstHandle *)new tinyxml2::XMLConstHandle((tinyxml2::XMLConstHandle const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_FirstChild(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->FirstChild();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_FirstChildElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->FirstChildElement((char const *)arg2);
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_FirstChildElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->FirstChildElement();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_LastChild(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->LastChild();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_LastChildElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->LastChildElement((char const *)arg2);
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_LastChildElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->LastChildElement();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_PreviousSibling(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->PreviousSibling();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_PreviousSiblingElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->PreviousSiblingElement((char const *)arg2);
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_PreviousSiblingElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->PreviousSiblingElement();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_NextSibling(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->NextSibling();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_NextSiblingElement__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  char *arg2 = (char *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  arg2 = (char *)jarg2; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->NextSiblingElement((char const *)arg2);
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_NextSiblingElement__SWIG_1(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  SwigValueWrapper< tinyxml2::XMLConstHandle > result;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = ((tinyxml2::XMLConstHandle const *)arg1)->NextSiblingElement();
  jresult = new tinyxml2::XMLConstHandle(result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_ToNode(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  tinyxml2::XMLNode *result = 0 ;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = (tinyxml2::XMLNode *)((tinyxml2::XMLConstHandle const *)arg1)->ToNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_ToElement(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  tinyxml2::XMLElement *result = 0 ;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = (tinyxml2::XMLElement *)((tinyxml2::XMLConstHandle const *)arg1)->ToElement();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_ToText(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  tinyxml2::XMLText *result = 0 ;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = (tinyxml2::XMLText *)((tinyxml2::XMLConstHandle const *)arg1)->ToText();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_ToUnknown(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  tinyxml2::XMLUnknown *result = 0 ;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = (tinyxml2::XMLUnknown *)((tinyxml2::XMLConstHandle const *)arg1)->ToUnknown();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLConstHandle_ToDeclaration(void * jarg1) {
  void * jresult ;
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  tinyxml2::XMLDeclaration *result = 0 ;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  result = (tinyxml2::XMLDeclaration *)((tinyxml2::XMLConstHandle const *)arg1)->ToDeclaration();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XMLConstHandle(void * jarg1) {
  tinyxml2::XMLConstHandle *arg1 = (tinyxml2::XMLConstHandle *) 0 ;
  
  arg1 = (tinyxml2::XMLConstHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLPrinter__SWIG_0(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  bool arg2 ;
  int arg3 ;
  tinyxml2::XMLPrinter *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = (int)jarg3; 
  result = (tinyxml2::XMLPrinter *)new tinyxml2::XMLPrinter(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLPrinter__SWIG_1(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  bool arg2 ;
  tinyxml2::XMLPrinter *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (tinyxml2::XMLPrinter *)new tinyxml2::XMLPrinter(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLPrinter__SWIG_2(void * jarg1) {
  void * jresult ;
  FILE *arg1 = (FILE *) 0 ;
  tinyxml2::XMLPrinter *result = 0 ;
  
  arg1 = (FILE *)jarg1; 
  result = (tinyxml2::XMLPrinter *)new tinyxml2::XMLPrinter(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XMLPrinter__SWIG_3() {
  void * jresult ;
  tinyxml2::XMLPrinter *result = 0 ;
  
  result = (tinyxml2::XMLPrinter *)new tinyxml2::XMLPrinter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XMLPrinter(void * jarg1) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushHeader(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  (arg1)->PushHeader(arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_OpenElement__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->OpenElement((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_OpenElement__SWIG_1(void * jarg1, char * jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->OpenElement((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushAttribute__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->PushAttribute((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushAttribute__SWIG_1(void * jarg1, char * jarg2, int jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->PushAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushAttribute__SWIG_2(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  (arg1)->PushAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushAttribute__SWIG_3(void * jarg1, char * jarg2, void * jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  int64_t arg3 ;
  int64_t *argp3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (int64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->PushAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushAttribute__SWIG_4(void * jarg1, char * jarg2, void * jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  uint64_t arg3 ;
  uint64_t *argp3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (uint64_t *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg3 = *argp3; 
  (arg1)->PushAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushAttribute__SWIG_5(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->PushAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushAttribute__SWIG_6(void * jarg1, char * jarg2, double jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->PushAttribute((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_CloseElement__SWIG_0(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  bool arg2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->CloseElement(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_CloseElement__SWIG_1(void * jarg1) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  (arg1)->CloseElement();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false; 
  (arg1)->PushText((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_1(void * jarg1, char * jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PushText((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_2(void * jarg1, int jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  int arg2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->PushText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_3(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->PushText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_4(void * jarg1, void * jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  int64_t arg2 ;
  int64_t *argp2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  argp2 = (int64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null int64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->PushText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_5(void * jarg1, void * jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  uint64_t arg2 ;
  uint64_t *argp2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  argp2 = (uint64_t *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null uint64_t", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->PushText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_6(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  bool arg2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->PushText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_7(void * jarg1, float jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  float arg2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (float)jarg2; 
  (arg1)->PushText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushText__SWIG_8(void * jarg1, double jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  double arg2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->PushText(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushComment(void * jarg1, char * jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PushComment((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushDeclaration(void * jarg1, char * jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PushDeclaration((char const *)arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_PushUnknown(void * jarg1, char * jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->PushUnknown((char const *)arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_VisitEnter__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLDocument *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDocument const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->VisitEnter((tinyxml2::XMLDocument const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_VisitExit__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLDocument *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLDocument *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDocument const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->VisitExit((tinyxml2::XMLDocument const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_VisitEnter__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLElement *arg2 = 0 ;
  tinyxml2::XMLAttribute *arg3 = (tinyxml2::XMLAttribute *) 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLElement *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLElement const & is null", 0);
    return 0;
  } 
  arg3 = (tinyxml2::XMLAttribute *)jarg3; 
  result = (bool)(arg1)->VisitEnter((tinyxml2::XMLElement const &)*arg2,(tinyxml2::XMLAttribute const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_VisitExit__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLElement *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLElement *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLElement const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->VisitExit((tinyxml2::XMLElement const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_Visit__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLText *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLText *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLText const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLText const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_Visit__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLComment *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLComment *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLComment const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLComment const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_Visit__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLDeclaration *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLDeclaration *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLDeclaration const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLDeclaration const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XMLPrinter_Visit__SWIG_3(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  tinyxml2::XMLUnknown *arg2 = 0 ;
  bool result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = (tinyxml2::XMLUnknown *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "tinyxml2::XMLUnknown const & is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->Visit((tinyxml2::XMLUnknown const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XMLPrinter_CStr(void * jarg1) {
  char * jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  char *result = 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  result = (char *)((tinyxml2::XMLPrinter const *)arg1)->CStr();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XMLPrinter_CStrSize(void * jarg1) {
  int jresult ;
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  int result;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  result = (int)((tinyxml2::XMLPrinter const *)arg1)->CStrSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_ClearBuffer__SWIG_0(void * jarg1, unsigned int jarg2) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  bool arg2 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->ClearBuffer(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XMLPrinter_ClearBuffer__SWIG_1(void * jarg1) {
  tinyxml2::XMLPrinter *arg1 = (tinyxml2::XMLPrinter *) 0 ;
  
  arg1 = (tinyxml2::XMLPrinter *)jarg1; 
  (arg1)->ClearBuffer();
}


SWIGEXPORT tinyxml2::XMLNode * SWIGSTDCALL CSharp_XMLText_SWIGUpcast(tinyxml2::XMLText *jarg1) {
    return (tinyxml2::XMLNode *)jarg1;
}

SWIGEXPORT tinyxml2::XMLNode * SWIGSTDCALL CSharp_XMLComment_SWIGUpcast(tinyxml2::XMLComment *jarg1) {
    return (tinyxml2::XMLNode *)jarg1;
}

SWIGEXPORT tinyxml2::XMLNode * SWIGSTDCALL CSharp_XMLDeclaration_SWIGUpcast(tinyxml2::XMLDeclaration *jarg1) {
    return (tinyxml2::XMLNode *)jarg1;
}

SWIGEXPORT tinyxml2::XMLNode * SWIGSTDCALL CSharp_XMLUnknown_SWIGUpcast(tinyxml2::XMLUnknown *jarg1) {
    return (tinyxml2::XMLNode *)jarg1;
}

SWIGEXPORT tinyxml2::XMLNode * SWIGSTDCALL CSharp_XMLElement_SWIGUpcast(tinyxml2::XMLElement *jarg1) {
    return (tinyxml2::XMLNode *)jarg1;
}

SWIGEXPORT tinyxml2::XMLNode * SWIGSTDCALL CSharp_XMLDocument_SWIGUpcast(tinyxml2::XMLDocument *jarg1) {
    return (tinyxml2::XMLNode *)jarg1;
}

SWIGEXPORT tinyxml2::XMLVisitor * SWIGSTDCALL CSharp_XMLPrinter_SWIGUpcast(tinyxml2::XMLPrinter *jarg1) {
    return (tinyxml2::XMLVisitor *)jarg1;
}

#ifdef __cplusplus
}
#endif

