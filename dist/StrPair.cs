//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class StrPair : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StrPair(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StrPair obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(StrPair obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~StrPair() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cstinyxml2PINVOKE.delete_StrPair(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public StrPair() : this(cstinyxml2PINVOKE.new_StrPair(), true) {
  }

  public void Set(string start, string end, int flags) {
    cstinyxml2PINVOKE.StrPair_Set(swigCPtr, start, end, flags);
  }

  public string GetStr() {
    string ret = cstinyxml2PINVOKE.StrPair_GetStr(swigCPtr);
    return ret;
  }

  public bool Empty() {
    bool ret = cstinyxml2PINVOKE.StrPair_Empty(swigCPtr);
    return ret;
  }

  public void SetInternedStr(string str) {
    cstinyxml2PINVOKE.StrPair_SetInternedStr(swigCPtr, str);
  }

  public void SetStr(string str, int flags) {
    cstinyxml2PINVOKE.StrPair_SetStr__SWIG_0(swigCPtr, str, flags);
  }

  public void SetStr(string str) {
    cstinyxml2PINVOKE.StrPair_SetStr__SWIG_1(swigCPtr, str);
  }

  public string ParseText(string in_, string endTag, int strFlags, SWIGTYPE_p_int curLineNumPtr) {
    string ret = cstinyxml2PINVOKE.StrPair_ParseText(swigCPtr, in_, endTag, strFlags, SWIGTYPE_p_int.getCPtr(curLineNumPtr));
    return ret;
  }

  public string ParseName(string in_) {
    string ret = cstinyxml2PINVOKE.StrPair_ParseName(swigCPtr, in_);
    return ret;
  }

  public void TransferTo(StrPair other) {
    cstinyxml2PINVOKE.StrPair_TransferTo(swigCPtr, StrPair.getCPtr(other));
  }

  public void Reset() {
    cstinyxml2PINVOKE.StrPair_Reset(swigCPtr);
  }

  public enum Mode {
    NEEDS_ENTITY_PROCESSING = 0x01,
    NEEDS_NEWLINE_NORMALIZATION = 0x02,
    NEEDS_WHITESPACE_COLLAPSING = 0x04,
    TEXT_ELEMENT = NEEDS_ENTITY_PROCESSING|NEEDS_NEWLINE_NORMALIZATION,
    TEXT_ELEMENT_LEAVE_ENTITIES = NEEDS_NEWLINE_NORMALIZATION,
    ATTRIBUTE_NAME = 0,
    ATTRIBUTE_VALUE = NEEDS_ENTITY_PROCESSING|NEEDS_NEWLINE_NORMALIZATION,
    ATTRIBUTE_VALUE_LEAVE_ENTITIES = NEEDS_NEWLINE_NORMALIZATION,
    COMMENT = NEEDS_NEWLINE_NORMALIZATION
  }

}
