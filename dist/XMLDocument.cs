//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.2.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class XMLDocument : XMLNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal XMLDocument(global::System.IntPtr cPtr, bool cMemoryOwn) : base(cstinyxml2PINVOKE.XMLDocument_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(XMLDocument obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(XMLDocument obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cstinyxml2PINVOKE.delete_XMLDocument(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public XMLDocument(bool processEntities, Whitespace whitespaceMode) : this(cstinyxml2PINVOKE.new_XMLDocument__SWIG_0(processEntities, (int)whitespaceMode), true) {
  }

  public XMLDocument(bool processEntities) : this(cstinyxml2PINVOKE.new_XMLDocument__SWIG_1(processEntities), true) {
  }

  public XMLDocument() : this(cstinyxml2PINVOKE.new_XMLDocument__SWIG_2(), true) {
  }

  public override XMLDocument ToDocument() {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_ToDocument__SWIG_0(swigCPtr);
    XMLDocument ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLDocument(cPtr, false);
    return ret;
  }

  public XMLError Parse(string xml, uint nBytes) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_Parse__SWIG_0(swigCPtr, xml, nBytes);
    return ret;
  }

  public XMLError Parse(string xml) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_Parse__SWIG_1(swigCPtr, xml);
    return ret;
  }

  public XMLError LoadFile(string filename) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_LoadFile__SWIG_0(swigCPtr, filename);
    return ret;
  }

  public XMLError LoadFile(SWIGTYPE_p_FILE arg0) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_LoadFile__SWIG_1(swigCPtr, SWIGTYPE_p_FILE.getCPtr(arg0));
    return ret;
  }

  public XMLError SaveFile(string filename, bool compact) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_SaveFile__SWIG_0(swigCPtr, filename, compact);
    return ret;
  }

  public XMLError SaveFile(string filename) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_SaveFile__SWIG_1(swigCPtr, filename);
    return ret;
  }

  public XMLError SaveFile(SWIGTYPE_p_FILE fp, bool compact) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_SaveFile__SWIG_2(swigCPtr, SWIGTYPE_p_FILE.getCPtr(fp), compact);
    return ret;
  }

  public XMLError SaveFile(SWIGTYPE_p_FILE fp) {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_SaveFile__SWIG_3(swigCPtr, SWIGTYPE_p_FILE.getCPtr(fp));
    return ret;
  }

  public bool ProcessEntities() {
    bool ret = cstinyxml2PINVOKE.XMLDocument_ProcessEntities(swigCPtr);
    return ret;
  }

  public Whitespace WhitespaceMode() {
    Whitespace ret = (Whitespace)cstinyxml2PINVOKE.XMLDocument_WhitespaceMode(swigCPtr);
    return ret;
  }

  public bool HasBOM() {
    bool ret = cstinyxml2PINVOKE.XMLDocument_HasBOM(swigCPtr);
    return ret;
  }

  public void SetBOM(bool useBOM) {
    cstinyxml2PINVOKE.XMLDocument_SetBOM(swigCPtr, useBOM);
  }

  public XMLElement RootElement() {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_RootElement__SWIG_0(swigCPtr);
    XMLElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLElement(cPtr, false);
    return ret;
  }

  public void Print(XMLPrinter streamer) {
    cstinyxml2PINVOKE.XMLDocument_Print__SWIG_0(swigCPtr, XMLPrinter.getCPtr(streamer));
  }

  public void Print() {
    cstinyxml2PINVOKE.XMLDocument_Print__SWIG_1(swigCPtr);
  }

  public override bool Accept(XMLVisitor visitor) {
    bool ret = cstinyxml2PINVOKE.XMLDocument_Accept(swigCPtr, XMLVisitor.getCPtr(visitor));
    return ret;
  }

  public XMLElement NewElement(string name) {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_NewElement(swigCPtr, name);
    XMLElement ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLElement(cPtr, false);
    return ret;
  }

  public XMLComment NewComment(string comment) {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_NewComment(swigCPtr, comment);
    XMLComment ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLComment(cPtr, false);
    return ret;
  }

  public XMLText NewText(string text) {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_NewText(swigCPtr, text);
    XMLText ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLText(cPtr, false);
    return ret;
  }

  public XMLDeclaration NewDeclaration(string text) {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_NewDeclaration__SWIG_0(swigCPtr, text);
    XMLDeclaration ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLDeclaration(cPtr, false);
    return ret;
  }

  public XMLDeclaration NewDeclaration() {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_NewDeclaration__SWIG_1(swigCPtr);
    XMLDeclaration ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLDeclaration(cPtr, false);
    return ret;
  }

  public XMLUnknown NewUnknown(string text) {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_NewUnknown(swigCPtr, text);
    XMLUnknown ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLUnknown(cPtr, false);
    return ret;
  }

  public void DeleteNode(XMLNode node) {
    cstinyxml2PINVOKE.XMLDocument_DeleteNode(swigCPtr, XMLNode.getCPtr(node));
  }

  public void ClearError() {
    cstinyxml2PINVOKE.XMLDocument_ClearError(swigCPtr);
  }

  public bool Error() {
    bool ret = cstinyxml2PINVOKE.XMLDocument_Error(swigCPtr);
    return ret;
  }

  public XMLError ErrorID() {
    XMLError ret = (XMLError)cstinyxml2PINVOKE.XMLDocument_ErrorID(swigCPtr);
    return ret;
  }

  public string ErrorName() {
    string ret = cstinyxml2PINVOKE.XMLDocument_ErrorName(swigCPtr);
    return ret;
  }

  public static string ErrorIDToName(XMLError errorID) {
    string ret = cstinyxml2PINVOKE.XMLDocument_ErrorIDToName((int)errorID);
    return ret;
  }

  public string ErrorStr() {
    string ret = cstinyxml2PINVOKE.XMLDocument_ErrorStr(swigCPtr);
    return ret;
  }

  public void PrintError() {
    cstinyxml2PINVOKE.XMLDocument_PrintError(swigCPtr);
  }

  public int ErrorLineNum() {
    int ret = cstinyxml2PINVOKE.XMLDocument_ErrorLineNum(swigCPtr);
    return ret;
  }

  public void Clear() {
    cstinyxml2PINVOKE.XMLDocument_Clear(swigCPtr);
  }

  public void DeepCopy(XMLDocument target) {
    cstinyxml2PINVOKE.XMLDocument_DeepCopy(swigCPtr, XMLDocument.getCPtr(target));
  }

  public string Identify(string p, SWIGTYPE_p_p_tinyxml2__XMLNode node, bool first) {
    string ret = cstinyxml2PINVOKE.XMLDocument_Identify(swigCPtr, p, SWIGTYPE_p_p_tinyxml2__XMLNode.getCPtr(node), first);
    return ret;
  }

  public void MarkInUse(XMLNode arg0) {
    cstinyxml2PINVOKE.XMLDocument_MarkInUse(swigCPtr, XMLNode.getCPtr(arg0));
  }

  public override XMLNode ShallowClone(XMLDocument arg0) {
    global::System.IntPtr cPtr = cstinyxml2PINVOKE.XMLDocument_ShallowClone(swigCPtr, XMLDocument.getCPtr(arg0));
    XMLNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new XMLNode(cPtr, false);
    return ret;
  }

  public override bool ShallowEqual(XMLNode arg0) {
    bool ret = cstinyxml2PINVOKE.XMLDocument_ShallowEqual(swigCPtr, XMLNode.getCPtr(arg0));
    return ret;
  }

}
